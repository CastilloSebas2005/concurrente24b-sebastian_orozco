procedure init_simulation(plate, output_path)
  print "entró"
  // Calcular la fórmula
  declare formula as double := (plate.time * plate.thermal_diffusivity) / (plate.alture * plate.alture)
  declare plate_matrix1 as double[][] := plate.plateM1
  declare plate_matrix2 as double[][] := plate.plateM2
  declare R as uint64_t := plate.rows
  declare C as uint64_t := plate.colums
  declare point as double := plate.sensitivity
  declare states as uint64_t := transfer(plate_matrix1, plate_matrix2, formula, R, C, point)
  if states = 0 then
    return 0
  end if
  declare totalTime as int64_t := states * plate.time
  declare time_seconds as time_t := (time_t)totalTime
  call make_report(plate.lineReaded, time_seconds, output_path, states)
  return 1
end procedure

procedure transfer(matrix1, matrix2, formula, R, C, point)
  declare states as uint64_t := 0
  declare limit as bool := true
  while limit do
    limit := false
    // se recorre la matriz
    for i := 1 to R - 1 do
      for j := 1 to C - 1 do
        matrix1[i][j] := matrix2[i][j] + formula * (matrix2[i - 1][j] + matrix2[i][j + 1] + matrix2[i + 1][j] + matrix2[i][j - 1] - 4 * matrix2[i][j])
        if fabs(matrix1[i][j] - matrix2[i][j]) > point then
          limit := true
        end if
      end for
    end for
    // se copia la matriz 1 en la dos 2
    for i := 0 to R - 1 do
      for j := 0 to C - 1 do
        matrix2[i][j] := matrix1[i][j]
      end for
    end for
    states := states + 1
  end while
  print "salió"
  return states
end procedure

procedure make_report(lineReport, time, output_path, states)
  declare file as FILE := output path

  write in file the report with states, format_line(lineReport) and time formated

  close file
end procedure

procedure format_line(line)
  for i := 0 to length of line do
    if line[i] = ' ' and line[i + 1] != ' ' then
      line[i] := '\t'
    end if
  end for
  return line
end procedure
