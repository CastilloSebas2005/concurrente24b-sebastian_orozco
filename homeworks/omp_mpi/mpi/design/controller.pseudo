procedure init_controller(argc, argv[])
  initialize manager_argument with init_managerArgument(argv)
  jobPath := get_jobPath(manager_argument)
  output_Path := get_outputPath(manager_argument)
  thread_count := manager_argument.thread_count

  if jobPath is NULL or output_Path is NULL then
    call destruct_manager(manager_argument)
    return
  end if

  linesToRead := get_lines_to_read(jobPath)
  if linesToRead is 0 then
    call destruct_manager(manager_argument)
    return
  end if

  shared_data := allocate memory for shared_data_t
  shared_data.line_report := allocate memory for array of linesToRead texts

  plates := array of linesToRead plates
  for i from 0 to linesToRead - 1 do
    call init_plate(plates[i], jobPath, argv[2], i)
  end for

  if thread_count is 1 then
    for i from 0 to linesToRead - 1 do
      if plates[i].blankline is 0 then
        states := init_simulation(plates[i])
        line := make_line_to_report(plates[i].lineReaded, plates[i].time * states, states)
        shared_data.line_report[i] := line
        print "Plate number: " + i + " calculated correctly..."
      end if
    end for
  else
    call create_threads(thread_count, plates, linesToRead, shared_data)
  end if

  error := make_report(shared_data.line_report, output_Path, linesToRead)
  if error is 0 then
    print "The report was created successfully"
    for i from 0 to linesToRead - 1 do
      if shared_data.line_report[i] is not NULL then
        print shared_data.line_report[i]
      end if
    end for
  end if

  for i from 0 to linesToRead - 1 do
    if plates[i].blankline is 0 then
      call destruct_plate(plates[i])
    end if
  end for

  for i from 0 to linesToRead - 1 do
    if shared_data.line_report[i] is not NULL then
      free shared_data.line_report[i]
    end if
  end for

  free shared_data.line_report
  free shared_data
  call destruct_manager(manager_argument)
end procedure

procedure create_threads(thread_count, plates, linesToRead, shared_data)
  threads := allocate memory for array of thread_count threads
  private_data := allocate memory for array of thread_count private_data_t

  if threads is NULL or private_data is NULL then
    print "Error: can't create threads or allocate memory"
    free threads
    free private_data
    return
  end if

  workDivision := linesToRead / thread_count
  remainder := linesToRead % thread_count

  for i from 0 to thread_count - 1 do
    linesForThisThread := workDivision + (i < remainder ? 1 : 0)
    private_data[i].plates := allocate memory for array of linesForThisThread plates
    private_data[i].linesToRead := linesForThisThread
    private_data[i].lines_to_write := allocate memory for array of linesForThisThread integers
    private_data[i].shared_data := shared_data

    if private_data[i].plates is NULL or private_data[i].lines_to_write is NULL then
      print "Error: can't allocate memory for plates"
      for j from 0 to i do
        free private_data[j].plates
      end for
      free private_data
      free threads
      return
    end if
  end for

  plateIndex := 0
  for i from 0 to thread_count - 1 do
    for j from 0 to private_data[i].linesToRead - 1 do
      if plates[plateIndex].blankline is 0 then
        private_data[i].lines_to_write[j] := plateIndex
        private_data[i].plates[j] := plates[plateIndex]
      end if
      plateIndex := plateIndex + 1
    end for
  end for

  for i from 0 to thread_count - 1 do
    create_thread(work, private_data[i])
  end for

  for i from 0 to thread_count - 1 do
    join_thread(threads[i])
  end for

  for i from 0 to thread_count - 1 do
    free private_data[i].plates
    free private_data[i].lines_to_write
  end for

  free private_data
  free threads
end procedure

procedure work(data)
  assert data is not NULL
  private_data := cast data to private_data_t

  for i from 0 to private_data.linesToRead - 1 do
    if private_data.plates[i].blankline is 0 then
      states := init_simulation(private_data.plates[i])
      line := make_line_to_report(private_data.plates[i].lineReaded, private_data.plates[i].time * states, states)
      if line is not NULL or states is not 0 then
        print "Plate number: " + private_data.lines_to_write[i] + " calculated correctly..."
        private_data.shared_data.line_report[private_data.lines_to_write[i]] := line
      end if
    end if
  end for

  return NULL
end procedure

procedure make_report(report, output_path, linesToRead)
  if report is NULL or output_path is NULL then
    print "Error: can't make the report"
    return 1
  end if

  file := open_file(output_path, "a+")
  if file is NULL then
    print "Error: can't create report, change your directory " + output_path
    return 1
  end if

  for i from 0 to linesToRead - 1 do
    if report[i] is not NULL then
      write_to_file(file, report[i])
    end if
  end for

  close_file(file)
  return 0
end procedure