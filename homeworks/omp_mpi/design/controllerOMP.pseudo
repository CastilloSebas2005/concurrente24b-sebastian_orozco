procedure init_controller(argv)
  declare manager_argument as manager_argument_t
  init_managerArgument(manager_argument, argv)
  // get the path and verify that path exists for job file and output file
  declare jobPath as char* := get_jobPath(manager_argument)
  declare output_Path as char* := get_outputPath(manager_argument)
  declare thread_count as uint64_t := manager_argument.thread_count
  if jobPath is NULL or output_Path is NULL then
    destruct_manager(manager_argument)
    return
  end if
  declare linesToRead as uint64_t := get_lines_to_read(jobPath)
  if linesToRead = 0 then
    destruct_manager(manager_argument)
    return
  end if
  if thread_count = 0 then
    destruct_manager(manager_argument)
    return
  end if
  declare shared_data as shared_data_t := calloc(1, sizeof(shared_data_t))
  shared_data.line_report := calloc(linesToRead, sizeof(char*))
  shared_data.thread_count := thread_count
  declare plates as array of plate_t of size linesToRead
  for i from 0 to linesToRead - 1 do
    init_plate(plates[i], jobPath, argv[2], i)
  end for
  // manage the threads correctly
  if thread_count = 1 then
    // Execute in a single thread
    for i from 0 to linesToRead - 1 do
      if plates[i].blankline = 0 then
        declare states as uint64_t := init_simulation(plates[i], thread_count)
        declare line as char* := make_line_to_report(plates[i].lineReaded, (time_t)(plates[i].time * states), states)
        shared_data.line_report[i] := line
        print "Plate number: " + i + " calculated correctly..."
      end if
    end for
  else
    // Execute in multiple threads
    create_threads(thread_count, plates, linesToRead, shared_data)
  end if
  declare error as uint8_t := make_report(shared_data.line_report, output_Path, linesToRead)
  if error = 0 then
    print "The report was created successfully"
  end if
  for i from 0 to linesToRead - 1 do
    if plates[i].blankline = 0 then
      destruct_plate(plates[i])
    end if
  end for
  for i from 0 to linesToRead - 1 do
    if shared_data.line_report[i] is not NULL then
      free(shared_data.line_report[i])
    end if
  end for
  free(shared_data.line_report)
  free(shared_data)
  destruct_manager(manager_argument)
end procedure

procedure create_threads(thread_count, plates, linesToRead, shared_data)
  declare Thread_count as uint64_t := thread_count
  if thread_count > linesToRead then
    Thread_count := linesToRead
  end if
  print "Thread count plates: " + Thread_count

  declare private_data as array of private_data_t of size Thread_count
  if private_data is NULL then
    print "Error: can't allocate memory"
    free(private_data)
    return
  end if

  // divide the work of threads
  declare workDivision as uint64_t := linesToRead / Thread_count
  declare remainder as uint64_t := linesToRead % Thread_count
  // Create the private data for each thread and assign the plates
  for i from 0 to Thread_count - 1 do
    declare linesForThisThread as uint64_t := workDivision + (i < remainder ? 1 : 0)
    private_data[i].plates := malloc(linesForThisThread * sizeof(plate_t))
    private_data[i].linesToRead := linesForThisThread
    private_data[i].lines_to_write := malloc(linesForThisThread * sizeof(uint64_t))
    private_data[i].shared_data := shared_data
    if private_data[i].plates is NULL or private_data[i].lines_to_write is NULL then
      print "Error: can't allocate memory for plates"
      for j from 0 to i do
        free(private_data[j].plates)
      end for
      free(private_data)
      return
    end if
  end for

  declare plateIndex as size_t := 0
  // assign the plates to each thread
  for i from 0 to Thread_count - 1 do
    for j from 0 to private_data[i].linesToRead - 1 do
      if plates[j].blankline = 0 then
        private_data[i].lines_to_write[j] := plateIndex
        private_data[i].plates[j] := plates[plateIndex]
      end if
      plateIndex := plateIndex + 1
    end for
  end for

  #pragma omp parallel for num_threads(Thread_count)
  for i from 0 to Thread_count - 1 do
    work(private_data[i])
  end for

  for i from 0 to Thread_count - 1 do
    free(private_data[i].plates)
    free(private_data[i].lines_to_write)
  end for
  free(private_data)
end procedure

procedure work(data)
  assert(data is not NULL)
  declare private_data as private_data_t := data
  for i from 0 to private_data.linesToRead - 1 do
    if private_data.plates[i].blankline = 0 then
      declare states as uint64_t := init_simulation(private_data.plates[i], private_data.shared_data.thread_count)
      declare line as char* := make_line_to_report(private_data.plates[i].lineReaded, (time_t)(private_data.plates[i].time * states), states)
      if line is not NULL or states != 0 then
        print "Plate number: " + private_data.lines_to_write[i] + " calculated correctly..."
        private_data.shared_data.line_report[private_data.lines_to_write[i]] := line
      end if
    end if
  end for
  return NULL
end procedure

procedure make_report(report, output_path, linesToRead)
  if report is NULL or output_path is NULL then
    print "Error: can't make the report"
    return 1
  end if
  declare file as FILE* := fopen(output_path, "w")
  if file is NULL then
    print "Error: can't create report, change your directory " + output_path
    return 1
  end if
  for i from 0 to linesToRead - 1 do
    if report[i] is not NULL then
      fputs(report[i], file)
    end if
  end for
  fclose(file)
  return 0
end procedure
