procedure init_simulation(plate)
  // Calcular la fórmula
  declare formula as double := (plate.time * plate.thermal_diffusivity) / (plate.alture * plate.alture)
  declare plate_matrix1 as double[][] := plate.plateM1
  declare plate_matrix2 as double[][] := plate.plateM2
  if plate_matrix1 is NULL and plate_matrix2 is NULL then
    return 0
  end if
  declare R as uint64_t := plate.rows
  declare C as uint64_t := plate.columns
  declare point as double := plate.sensitivity
  declare states as uint64_t := transfer(plate_matrix1, plate_matrix2, formula, R, C, point)
  if states is 0 then
    print "Error: can't make the simulation"
    return 0
  end if
  return states
end procedure

procedure transfer(matrix1, matrix2, formula, R, C, point)
  if matrix1 is NULL and matrix2 is NULL then
    print "Error: matrix1 and matrix2 are NULL"
    return 0
  end if
  declare states as uint64_t := 0
  declare limit as bool := true
  while limit do
    limit := false
    // Aplicar la fórmula a la matriz
    for i from 1 to R - 1 do
      for j from 1 to C - 1 do
        matrix1[i][j] := matrix2[i][j] + formula * (matrix2[i - 1][j] + matrix2[i][j + 1] + matrix2[i + 1][j] + matrix2[i][j - 1] - 4 * matrix2[i][j])
        if abs(matrix1[i][j] - matrix2[i][j]) > point then
          limit := true
        end if
      end for
    end for
    // Copiar matrix1 a matrix2
    for i from 0 to R - 1 do
      for j from 0 to C - 1 do
        matrix2[i][j] := matrix1[i][j]
      end for
    end for
    states := states + 1
  end while
  return states
end procedure

procedure make_line_to_report(lineReport, time, states)
  if lineReport is NULL then
    return NULL
  end if
  declare int_to_char as char[21]
  format int_to_char with states
  declare timeFormated as char[48]
  format_time(time, timeFormated, 48)
  declare buffer_size as size_t := length(lineReport) + 48 + 21 + 4
  declare buffer as char[buffer_size]
  if buffer is NULL then
    print "Error: can't allocate memory for buffer"
    return NULL
  end if
  format buffer with lineReport, states, timeFormated
  return buffer
end procedure

procedure format_time(seconds, text, capacity)
  declare gmt as struct tm
  gmtime_r(seconds, gmt)
  format text with gmt.tm_year - 70, gmt.tm_mon, gmt.tm_mday - 1, gmt.tm_hour, gmt.tm_min, gmt.tm_sec
  return text
end procedure

procedure format_line(line)
  for i from 0 to length(line) - 1 do
    if line[i] = ' ' and line[i + 1] != ' ' then
      line[i] := '\t'
    end if
  end for
  return line
end procedure
