procedure init_managerArgument(manager, argv[])
  path_job := make_path(argv[2], argv[1])
  jobName := extract_outputName(argv[1])
  path_output := make_path(argv[3], jobName)
  manager.jobPath := path_job
  manager.outputPath := path_output

  thread_count := sysconf(_SC_NPROCESSORS_ONLN)
  if sscanf(argv[4], "%" SCNu64, &thread_count) is 1 then
    manager.thread_count := thread_count
  else
    print "Error: invalid thread count"
    free jobName
    return
  end if

  if thread_count is 0 then
    manager.thread_count := sysconf(_SC_NPROCESSORS_ONLN)
  end if

  free jobName
end procedure

procedure get_jobPath(manager)
  if manager.jobPath is NULL then
    print "Error: not found jobPath"
    return NULL
  end if

  file := open_file(manager.jobPath, "r")
  if file is NULL then
    print "Error: the path of the jobfile is incorrect"
    return NULL
  end if

  close_file(file)
  return manager.jobPath
end procedure

procedure get_outputPath(manager)
  if manager.outputPath is NULL then
    print "Error: not found outputPath"
    return NULL
  end if
  return manager.outputPath
end procedure

procedure get_lines_to_read(path)
  file := open_file(path, "r")
  if file is NULL then
    print "Error: can't open the file to count the lines"
    return 0
  end if

  first_char := fgetc(file)
  if first_char is EOF then
    print "Error: the file " + path + " is empty"
    close_file(file)
    return 0
  end if

  rewind(file)

  lines := 0
  while (c := fgetc(file)) is not EOF do
    if c is '\n' then
      lines := lines + 1
    end if
  end while

  if first_char is not '\n' then
    lines := lines + 1
  end if

  close_file(file)
  return lines
end procedure

procedure extract_outputName(jobFile)
  if jobFile is NULL then
    print "Error: not found jobFile"
    return NULL
  end if

  if jobFile[0] is 'j' and jobFile[1] is 'o' and jobFile[2] is 'b' then
    size := 0
    while jobFile[size] is not '.' do
      size := size + 1
    end while

    size := size + 5
    jobName := allocate memory for string of size

    i := 0
    while jobFile[i] is not '.' do
      jobName[i] := jobFile[i]
      i := i + 1
    end while

    extention := ".tsv"
    j := 0
    while extention[j] is not '\0' do
      jobName[i] := extention[j]
      i := i + 1
      j := j + 1
    end while

    jobName[i] := '\0'
    return jobName
  end if

  print "Error: this program need a file called jobxxx.txt"
  return NULL
end procedure

procedure destruct_manager(manager)
  free manager.jobPath
  free manager.outputPath
end procedure